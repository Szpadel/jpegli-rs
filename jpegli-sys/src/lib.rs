/* automatically generated by rust-bindgen 0.69.4 */
mod jerror;
pub use jerror::*;

pub const JPEG_LIB_VERSION: ::std::os::raw::c_int = 80;
pub const MEM_SRCDST_SUPPORTED: u32 = 1;
pub const BITS_IN_JSAMPLE: u32 = 8;
pub const MAX_COMPONENTS: u32 = 10;
pub const MAXJSAMPLE: u32 = 255;
pub const CENTERJSAMPLE: u32 = 128;
pub const JPEG_MAX_DIMENSION: u32 = 65500;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const DCTSIZE: usize = 8;
pub const DCTSIZE2: usize = 64;
pub const NUM_QUANT_TBLS: u32 = 4;
pub const NUM_HUFF_TBLS: u32 = 4;
pub const NUM_ARITH_TBLS: u32 = 16;
pub const MAX_COMPS_IN_SCAN: u32 = 4;
pub const MAX_SAMP_FACTOR: u32 = 4;
pub const C_MAX_BLOCKS_IN_MCU: u32 = 10;
pub const D_MAX_BLOCKS_IN_MCU: u32 = 10;
pub const JCS_EXTENSIONS: u32 = 1;
pub const JCS_ALPHA_EXTENSIONS: u32 = 1;
pub const JMSG_LENGTH_MAX: u32 = 200;
pub const JMSG_STR_PARM_MAX: u32 = 80;
pub const JPOOL_PERMANENT: u32 = 0;
pub const JPOOL_IMAGE: u32 = 1;
pub const JPOOL_NUMPOOLS: u32 = 2;
pub const JPEG_SUSPENDED: u32 = 0;
pub const JPEG_HEADER_OK: u32 = 1;
pub const JPEG_HEADER_TABLES_ONLY: u32 = 2;
pub const JPEG_REACHED_SOS: u32 = 1;
pub const JPEG_REACHED_EOI: u32 = 2;
pub const JPEG_ROW_COMPLETED: u32 = 3;
pub const JPEG_SCAN_COMPLETED: u32 = 4;
pub const JPEG_RST0: u32 = 208;
pub const JPEG_EOI: u32 = 217;
pub const JPEG_APP0: u32 = 224;
pub const JPEG_COM: u32 = 254;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = libc::FILE;
pub type JSAMPLE = ::std::os::raw::c_uchar;
pub type JCOEF = ::std::os::raw::c_short;
pub type JOCTET = ::std::os::raw::c_uchar;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type INT16 = ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_long;
pub type JDIMENSION = ::std::os::raw::c_uint;
pub type boolean = ::std::os::raw::c_int;
pub type JSAMPROW = *const JSAMPLE;
pub type JSAMPROW_MUT = *mut JSAMPLE;
pub type JSAMPARRAY = *const JSAMPROW;
pub type JSAMPARRAY_MUT = *mut JSAMPROW_MUT;
pub type JSAMPIMAGE = *const JSAMPARRAY;
pub type JSAMPIMAGE_MUT = *mut JSAMPARRAY_MUT;
pub type JBLOCK = [JCOEF; 64usize];
pub type JBLOCKROW = *mut JBLOCK;
pub type JBLOCKARRAY = *mut JBLOCKROW;
pub type JBLOCKIMAGE = *mut JBLOCKARRAY;
pub type JCOEFPTR = *mut JCOEF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JQUANT_TBL {
    pub quantval: [UINT16; 64usize],
    pub sent_table: boolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JHUFF_TBL {
    pub bits: [UINT8; 17usize],
    pub huffval: [UINT8; 256usize],
    pub sent_table: boolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_component_info {
    pub component_id: ::std::os::raw::c_int,
    pub component_index: ::std::os::raw::c_int,
    pub h_samp_factor: ::std::os::raw::c_int,
    pub v_samp_factor: ::std::os::raw::c_int,
    pub quant_tbl_no: ::std::os::raw::c_int,
    pub dc_tbl_no: ::std::os::raw::c_int,
    pub ac_tbl_no: ::std::os::raw::c_int,
    pub width_in_blocks: JDIMENSION,
    pub height_in_blocks: JDIMENSION,
    pub DCT_h_scaled_size: ::std::os::raw::c_int,
    pub DCT_v_scaled_size: ::std::os::raw::c_int,
    pub downsampled_width: JDIMENSION,
    pub downsampled_height: JDIMENSION,
    pub component_needed: boolean,
    pub MCU_width: ::std::os::raw::c_int,
    pub MCU_height: ::std::os::raw::c_int,
    pub MCU_blocks: ::std::os::raw::c_int,
    pub MCU_sample_width: ::std::os::raw::c_int,
    pub last_col_width: ::std::os::raw::c_int,
    pub last_row_height: ::std::os::raw::c_int,
    pub quant_table: *mut JQUANT_TBL,
    pub dct_table: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_scan_info {
    pub comps_in_scan: ::std::os::raw::c_int,
    pub component_index: [::std::os::raw::c_int; 4usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
}
pub type jpegli_saved_marker_ptr = *mut jpegli_marker_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_marker_struct {
    pub next: jpegli_saved_marker_ptr,
    pub marker: UINT8,
    pub original_length: ::std::os::raw::c_uint,
    pub data_length: ::std::os::raw::c_uint,
    pub data: *mut JOCTET,
}

pub enum jpegli_marker {
    APP0 = 0xE0, /* APP0 marker code */
    COM = 0xFE,  /* COM marker code */
}

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum J_COLOR_SPACE {
    JCS_UNKNOWN = 0,
    JCS_GRAYSCALE = 1,
    JCS_RGB = 2,
    JCS_YCbCr = 3,
    JCS_CMYK = 4,
    JCS_YCCK = 5,
    JCS_EXT_RGB = 6,
    JCS_EXT_RGBX = 7,
    JCS_EXT_BGR = 8,
    JCS_EXT_BGRX = 9,
    JCS_EXT_XBGR = 10,
    JCS_EXT_XRGB = 11,
    JCS_EXT_RGBA = 12,
    JCS_EXT_BGRA = 13,
    JCS_EXT_ABGR = 14,
    JCS_EXT_ARGB = 15,
    JCS_RGB565 = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum J_DCT_METHOD {
    JDCT_ISLOW = 0,
    JDCT_IFAST = 1,
    JDCT_FLOAT = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum J_DITHER_MODE {
    JDITHER_NONE = 0,
    JDITHER_ORDERED = 1,
    JDITHER_FS = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_common_struct {
    pub err: *mut jpegli_error_mgr,
    pub mem: *mut jpegli_memory_mgr,
    pub progress: *mut jpegli_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_compress_struct {
    pub common: jpegli_common_struct,
    pub dest: *mut jpegli_destination_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub input_components: ::std::os::raw::c_int,
    pub in_color_space: J_COLOR_SPACE,
    pub input_gamma: f64,
    pub scale_num: ::std::os::raw::c_uint,
    pub scale_denom: ::std::os::raw::c_uint,
    pub jpegli_width: JDIMENSION,
    pub jpegli_height: JDIMENSION,
    pub data_precision: ::std::os::raw::c_int,
    pub num_components: ::std::os::raw::c_int,
    pub jpegli_color_space: J_COLOR_SPACE,
    pub comp_info: *mut jpegli_component_info,
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub q_scale_factor: [::std::os::raw::c_int; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub num_scans: ::std::os::raw::c_int,
    pub scan_info: *const jpegli_scan_info,
    pub raw_data_in: boolean,
    pub arith_code: boolean,
    pub optimize_coding: boolean,
    pub CCIR601_sampling: boolean,
    pub do_fancy_downsampling: boolean,
    pub smoothing_factor: ::std::os::raw::c_int,
    pub dct_method: J_DCT_METHOD,
    pub restart_interval: ::std::os::raw::c_uint,
    pub restart_in_rows: ::std::os::raw::c_int,
    pub write_JFIF_header: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub write_Adobe_marker: boolean,
    pub next_scanline: JDIMENSION,
    pub progressive_mode: boolean,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub min_DCT_h_scaled_size: ::std::os::raw::c_int,
    pub min_DCT_v_scaled_size: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpegli_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub blocks_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub block_size: ::std::os::raw::c_int,
    pub natural_order: *const ::std::os::raw::c_int,
    pub lim_Se: ::std::os::raw::c_int,
    pub master: *mut jpegli_comp_master,
    pub main: *mut jpegli_c_main_controller,
    pub prep: *mut jpegli_c_prep_controller,
    pub coef: *mut jpegli_c_coef_controller,
    pub marker: *mut jpegli_marker_writer,
    pub cconvert: *mut jpegli_color_converter,
    pub downsample: *mut jpegli_downsampler,
    pub fdct: *mut jpegli_forward_dct,
    pub entropy: *mut jpegli_entropy_encoder,
    pub script_space: *mut jpegli_scan_info,
    pub script_space_size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_decompress_struct {
    pub common: jpegli_common_struct,
    pub src: *mut jpegli_source_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub num_components: ::std::os::raw::c_int,
    pub jpegli_color_space: J_COLOR_SPACE,
    pub out_color_space: J_COLOR_SPACE,
    pub scale_num: ::std::os::raw::c_uint,
    pub scale_denom: ::std::os::raw::c_uint,
    pub output_gamma: f64,
    pub buffered_image: boolean,
    pub raw_data_out: boolean,
    pub dct_method: J_DCT_METHOD,
    pub do_fancy_upsampling: boolean,
    pub do_block_smoothing: boolean,
    pub quantize_colors: boolean,
    pub dither_mode: J_DITHER_MODE,
    pub two_pass_quantize: boolean,
    pub desired_number_of_colors: ::std::os::raw::c_int,
    pub enable_1pass_quant: boolean,
    pub enable_external_quant: boolean,
    pub enable_2pass_quant: boolean,
    pub output_width: JDIMENSION,
    pub output_height: JDIMENSION,
    pub out_color_components: ::std::os::raw::c_int,
    pub output_components: ::std::os::raw::c_int,
    pub rec_outbuf_height: ::std::os::raw::c_int,
    pub actual_number_of_colors: ::std::os::raw::c_int,
    pub colormap: JSAMPARRAY_MUT,
    pub output_scanline: JDIMENSION,
    pub input_scan_number: ::std::os::raw::c_int,
    pub input_iMCU_row: JDIMENSION,
    pub output_scan_number: ::std::os::raw::c_int,
    pub output_iMCU_row: JDIMENSION,
    pub coef_bits: *mut [::std::os::raw::c_int; 64usize],
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub data_precision: ::std::os::raw::c_int,
    pub comp_info: *mut jpegli_component_info,
    pub is_baseline: boolean,
    pub progressive_mode: boolean,
    pub arith_code: boolean,
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub restart_interval: ::std::os::raw::c_uint,
    pub saw_JFIF_marker: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub saw_Adobe_marker: boolean,
    pub Adobe_transform: UINT8,
    pub CCIR601_sampling: boolean,
    pub marker_list: jpegli_saved_marker_ptr,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub min_DCT_h_scaled_size: ::std::os::raw::c_int,
    pub min_DCT_v_scaled_size: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub sample_range_limit: *mut JSAMPLE,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpegli_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub blocks_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub block_size: ::std::os::raw::c_int,
    pub natural_order: *const ::std::os::raw::c_int,
    pub lim_Se: ::std::os::raw::c_int,
    pub unread_marker: ::std::os::raw::c_int,
    pub master: *mut jpegli_decomp_master,
    pub main: *mut jpegli_d_main_controller,
    pub coef: *mut jpegli_d_coef_controller,
    pub post: *mut jpegli_d_post_controller,
    pub inputctl: *mut jpegli_input_controller,
    pub marker: *mut jpegli_marker_reader,
    pub entropy: *mut jpegli_entropy_decoder,
    pub idct: *mut jpegli_inverse_dct,
    pub upsample: *mut jpegli_upsampler,
    pub cconvert: *mut jpegli_color_deconverter,
    pub cquantize: *mut jpegli_color_quantizer,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jpegli_error_mgr {
    pub error_exit:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct)>,
    pub emit_message: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            msg_level: ::std::os::raw::c_int,
        ),
    >,
    pub output_message:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct)>,
    pub format_message: ::std::option::Option<
        unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct, buffer: &[u8; 80usize]),
    >,
    pub reset_error_mgr:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct)>,
    pub msg_code: ::std::os::raw::c_int,
    pub msg_parm: jpegli_error_mgr__bindgen_ty_1,
    pub trace_level: ::std::os::raw::c_int,
    pub num_warnings: ::std::os::raw::c_long,
    pub jpegli_message_table: *const *const ::std::os::raw::c_char,
    pub last_jpegli_message: ::std::os::raw::c_int,
    pub addon_message_table: *const *const ::std::os::raw::c_char,
    pub first_addon_message: ::std::os::raw::c_int,
    pub last_addon_message: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jpegli_error_mgr__bindgen_ty_1 {
    pub i: [::std::os::raw::c_int; 8usize],
    pub s: [::std::os::raw::c_char; 80usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_progress_mgr {
    pub progress_monitor:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct)>,
    pub pass_counter: ::std::os::raw::c_long,
    pub pass_limit: ::std::os::raw::c_long,
    pub completed_passes: ::std::os::raw::c_int,
    pub total_passes: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_destination_mgr {
    pub next_output_byte: *mut JOCTET,
    pub free_in_buffer: usize,
    pub init_destination:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_compress_struct)>,
    pub empty_output_buffer: ::std::option::Option<
        unsafe extern "C-unwind" fn(cinfo: &mut jpegli_compress_struct) -> boolean,
    >,
    pub term_destination:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_compress_struct)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_source_mgr {
    pub next_input_byte: *const JOCTET,
    pub bytes_in_buffer: usize,
    pub init_source:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_decompress_struct)>,
    pub fill_input_buffer: ::std::option::Option<
        unsafe extern "C-unwind" fn(cinfo: &mut jpegli_decompress_struct) -> boolean,
    >,
    pub skip_input_data: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_decompress_struct,
            num_bytes: ::std::os::raw::c_long,
        ),
    >,
    pub resync_to_restart: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_decompress_struct,
            desired: ::std::os::raw::c_int,
        ) -> boolean,
    >,
    pub term_source:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_decompress_struct)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_sarray_control {
    _unused: [u8; 0],
}
pub type jvirt_sarray_ptr = *mut jvirt_sarray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_barray_control {
    _unused: [u8; 0],
}
pub type jvirt_barray_ptr = *mut jvirt_barray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_memory_mgr {
    pub alloc_small: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
            sizeofobject: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub alloc_large: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
            sizeofobject: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub alloc_sarray: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
            samplesperrow: JDIMENSION,
            numrows: JDIMENSION,
        ) -> JSAMPARRAY_MUT,
    >,
    pub alloc_barray: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
            blocksperrow: JDIMENSION,
            numrows: JDIMENSION,
        ) -> JBLOCKARRAY,
    >,
    pub request_virt_sarray: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
            pre_zero: boolean,
            samplesperrow: JDIMENSION,
            numrows: JDIMENSION,
            maxaccess: JDIMENSION,
        ) -> jvirt_sarray_ptr,
    >,
    pub request_virt_barray: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
            pre_zero: boolean,
            blocksperrow: JDIMENSION,
            numrows: JDIMENSION,
            maxaccess: JDIMENSION,
        ) -> jvirt_barray_ptr,
    >,
    pub realize_virt_arrays:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct)>,
    pub access_virt_sarray: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            ptr: jvirt_sarray_ptr,
            start_row: JDIMENSION,
            num_rows: JDIMENSION,
            writable: boolean,
        ) -> JSAMPARRAY_MUT,
    >,
    pub access_virt_barray: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            ptr: jvirt_barray_ptr,
            start_row: JDIMENSION,
            num_rows: JDIMENSION,
            writable: boolean,
        ) -> JBLOCKARRAY,
    >,
    pub free_pool: ::std::option::Option<
        unsafe extern "C-unwind" fn(
            cinfo: &mut jpegli_common_struct,
            pool_id: ::std::os::raw::c_int,
        ),
    >,
    pub self_destruct:
        ::std::option::Option<unsafe extern "C-unwind" fn(cinfo: &mut jpegli_common_struct)>,
    pub max_memory_to_use: ::std::os::raw::c_long,
    pub max_alloc_chunk: ::std::os::raw::c_long,
}
pub type jpegli_marker_parser_method = ::std::option::Option<
    unsafe extern "C-unwind" fn(cinfo: &mut jpegli_decompress_struct) -> boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_comp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_c_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_c_prep_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_c_coef_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_marker_writer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_color_converter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_downsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_forward_dct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_entropy_encoder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_decomp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_d_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_d_coef_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_d_post_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_input_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_marker_reader {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_entropy_decoder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_inverse_dct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_upsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_color_deconverter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpegli_color_quantizer {
    pub _address: u8,
}
extern "C-unwind" {
    pub fn jpegli_std_error(err: &mut jpegli_error_mgr) -> *mut jpegli_error_mgr;
    pub fn jpegli_CreateCompress(
        cinfo: &mut jpegli_compress_struct,
        version: ::std::os::raw::c_int,
        structsize: usize,
    );
    pub fn jpegli_CreateDecompress(
        cinfo: &mut jpegli_decompress_struct,
        version: ::std::os::raw::c_int,
        structsize: usize,
    );
    pub fn jpegli_destroy_compress(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_destroy_decompress(cinfo: &mut jpegli_decompress_struct);
    pub fn jpegli_stdio_dest(cinfo: &mut jpegli_compress_struct, outfile: *mut FILE);
    pub fn jpegli_stdio_src(cinfo: &mut jpegli_decompress_struct, infile: *mut FILE);
    pub fn jpegli_mem_dest(
        cinfo: &mut jpegli_compress_struct,
        outbuffer: *mut *mut ::std::os::raw::c_uchar,
        outsize: *mut ::std::os::raw::c_ulong,
    );
    pub fn jpegli_mem_src(
        cinfo: &mut jpegli_decompress_struct,
        inbuffer: *const ::std::os::raw::c_uchar,
        insize: ::std::os::raw::c_ulong,
    );
    pub fn jpegli_set_defaults(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_set_colorspace(cinfo: &mut jpegli_compress_struct, colorspace: J_COLOR_SPACE);
    pub fn jpegli_default_colorspace(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_set_quality(
        cinfo: &mut jpegli_compress_struct,
        quality: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
    pub fn jpegli_set_linear_quality(
        cinfo: &mut jpegli_compress_struct,
        scale_factor: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
    pub fn jpegli_default_qtables(cinfo: &mut jpegli_compress_struct, force_baseline: boolean);
    pub fn jpegli_add_quant_table(
        cinfo: &mut jpegli_compress_struct,
        which_tbl: ::std::os::raw::c_int,
        basic_table: *const ::std::os::raw::c_uint,
        scale_factor: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
    pub fn jpegli_quality_scaling(quality: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn jpegli_simple_progression(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_suppress_tables(cinfo: &mut jpegli_compress_struct, suppress: boolean);
    pub fn jpegli_alloc_quant_table(cinfo: &mut jpegli_common_struct) -> *mut JQUANT_TBL;
    pub fn jpegli_alloc_huff_table(cinfo: &mut jpegli_common_struct) -> *mut JHUFF_TBL;
    pub fn jpegli_start_compress(cinfo: &mut jpegli_compress_struct, write_all_tables: boolean);
    pub fn jpegli_write_scanlines(
        cinfo: &mut jpegli_compress_struct,
        scanlines: JSAMPARRAY,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
    pub fn jpegli_finish_compress(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_calc_jpegli_dimensions(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_write_raw_data(
        cinfo: &mut jpegli_compress_struct,
        data: JSAMPIMAGE,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
    pub fn jpegli_write_marker(
        cinfo: &mut jpegli_compress_struct,
        marker: ::std::os::raw::c_int,
        dataptr: *const JOCTET,
        datalen: ::std::os::raw::c_uint,
    );
    pub fn jpegli_write_m_header(
        cinfo: &mut jpegli_compress_struct,
        marker: ::std::os::raw::c_int,
        datalen: ::std::os::raw::c_uint,
    );
    pub fn jpegli_write_m_byte(cinfo: &mut jpegli_compress_struct, val: ::std::os::raw::c_int);
    pub fn jpegli_write_tables(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_write_icc_profile(
        cinfo: &mut jpegli_compress_struct,
        icc_data_ptr: *const JOCTET,
        icc_data_len: ::std::os::raw::c_uint,
    );
    pub fn jpegli_read_header(
        cinfo: &mut jpegli_decompress_struct,
        require_image: boolean,
    ) -> ::std::os::raw::c_int;
    pub fn jpegli_start_decompress(cinfo: &mut jpegli_decompress_struct) -> boolean;
    pub fn jpegli_read_scanlines(
        cinfo: &mut jpegli_decompress_struct,
        scanlines: JSAMPARRAY_MUT,
        max_lines: JDIMENSION,
    ) -> JDIMENSION;
    pub fn jpegli_skip_scanlines(
        cinfo: &mut jpegli_decompress_struct,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
    pub fn jpegli_crop_scanline(
        cinfo: &mut jpegli_decompress_struct,
        xoffset: *mut JDIMENSION,
        width: *mut JDIMENSION,
    );
    pub fn jpegli_finish_decompress(cinfo: &mut jpegli_decompress_struct) -> boolean;
    pub fn jpegli_read_raw_data(
        cinfo: &mut jpegli_decompress_struct,
        data: JSAMPIMAGE_MUT,
        max_lines: JDIMENSION,
    ) -> JDIMENSION;
    pub fn jpegli_has_multiple_scans(cinfo: &mut jpegli_decompress_struct) -> boolean;
    pub fn jpegli_start_output(
        cinfo: &mut jpegli_decompress_struct,
        scan_number: ::std::os::raw::c_int,
    ) -> boolean;
    pub fn jpegli_finish_output(cinfo: &mut jpegli_decompress_struct) -> boolean;
    pub fn jpegli_input_complete(cinfo: &mut jpegli_decompress_struct) -> boolean;
    pub fn jpegli_new_colormap(cinfo: &mut jpegli_decompress_struct);
    pub fn jpegli_consume_input(cinfo: &mut jpegli_decompress_struct) -> ::std::os::raw::c_int;
    pub fn jpegli_core_output_dimensions(cinfo: &mut jpegli_decompress_struct);
    pub fn jpegli_calc_output_dimensions(cinfo: &mut jpegli_decompress_struct);
    pub fn jpegli_save_markers(
        cinfo: &mut jpegli_decompress_struct,
        marker_code: ::std::os::raw::c_int,
        length_limit: ::std::os::raw::c_uint,
    );
    pub fn jpegli_set_marker_processor(
        cinfo: &mut jpegli_decompress_struct,
        marker_code: ::std::os::raw::c_int,
        routine: jpegli_marker_parser_method,
    );
    pub fn jpegli_read_coefficients(cinfo: &mut jpegli_decompress_struct) -> *mut jvirt_barray_ptr;
    pub fn jpegli_write_coefficients(
        cinfo: &mut jpegli_compress_struct,
        coef_arrays: *mut jvirt_barray_ptr,
    );
    pub fn jpegli_copy_critical_parameters(
        srcinfo: &mut jpegli_decompress_struct,
        dstinfo: &mut jpegli_compress_struct,
    );
    pub fn jpegli_abort_compress(cinfo: &mut jpegli_compress_struct);
    pub fn jpegli_abort_decompress(cinfo: &mut jpegli_decompress_struct);
    pub fn jpegli_abort(cinfo: &mut jpegli_common_struct);
    pub fn jpegli_destroy(cinfo: &mut jpegli_common_struct);
    pub fn jpegli_resync_to_restart(
        cinfo: &mut jpegli_decompress_struct,
        desired: ::std::os::raw::c_int,
    ) -> boolean;
    pub fn jpegli_read_icc_profile(
        cinfo: &mut jpegli_decompress_struct,
        icc_data_ptr: *mut *mut JOCTET,
        icc_data_len: *mut ::std::os::raw::c_uint,
    ) -> boolean;
}

pub unsafe fn jpegli_create_decompress(dinfo: &mut jpegli_decompress_struct) {
    jpegli_CreateDecompress(
        dinfo,
        JPEG_LIB_VERSION,
        std::mem::size_of::<jpegli_decompress_struct>(),
    );
}

pub unsafe fn jpegli_create_compress(cinfo: &mut jpegli_compress_struct) {
    jpegli_CreateCompress(
        cinfo,
        JPEG_LIB_VERSION,
        std::mem::size_of::<jpegli_compress_struct>(),
    );
}
